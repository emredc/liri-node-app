{
  "_from": "oauth-client@~0.1.5",
  "_id": "oauth-client@0.1.7",
  "_inBundle": false,
  "_integrity": "sha1-vpmq0I2RMXNTafj1KYDyygI5APs=",
  "_location": "/oauth-client",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "oauth-client@~0.1.5",
    "name": "oauth-client",
    "escapedName": "oauth-client",
    "rawSpec": "~0.1.5",
    "saveSpec": null,
    "fetchSpec": "~0.1.5"
  },
  "_requiredBy": [
    "/etsy"
  ],
  "_resolved": "https://registry.npmjs.org/oauth-client/-/oauth-client-0.1.7.tgz",
  "_shasum": "be99aad08d9131735369f8f52980f2ca023900fb",
  "_spec": "oauth-client@~0.1.5",
  "_where": "C:\\Users\\EMRE\\apps\\Project1\\node_modules\\etsy",
  "author": {
    "name": "Ryan Fairchild"
  },
  "bundleDependencies": false,
  "deprecated": false,
  "description": "An [OAuth 1.0A](http://oauth.net/core/1.0a/) library for [node.js](http://nodejs.org).  There are currently a handful of OAuth libraries but I choose to take a different route with how the API is used.  The usage is really similar to [simplegeo's python OAuth client](http://github.com/simplegeo/python-oauth2).  It extends the built-in http client which makes signing requests require two extra parameters.  The only difference is that requests must have thier body (if present) and a signature provided, the client takes care of the rest. You are responsible for handling the authentication flow, check out [this example](http://github.com/unscene/node-oauth/blob/master/examples/twitter.js) to see possible uses.",
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">=0.1.100"
  },
  "main": "./lib/oauth",
  "name": "oauth-client",
  "version": "0.1.7"
}
